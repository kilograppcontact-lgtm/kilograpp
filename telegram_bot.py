# telegram_bot.py
import os
import re
import logging
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo

import aiohttp
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import TimedOut, NetworkError, TelegramError
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from telegram.request import HTTPXRequest

# === CONFIG ===
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

ALMATY_TZ = pytz.timezone("Asia/Almaty")
TIMEZONE = "Asia/Almaty"

BACKEND_URL = os.getenv("BACKEND_URL", "http://127.0.0.1:5000").rstrip("/")
BOT_SECRET_TOKEN = os.getenv("BOT_SECRET_TOKEN")
app_token = os.getenv("TELEGRAM_BOT_TOKEN")

os.makedirs("temp_photos", exist_ok=True)

# Conversation states
(ASK_CODE, SELECT_MENU, ASK_PHOTO, HANDLE_SAVE, OVERWRITE_CONFIRM, HISTORY_MENU, ACTIVITY_INPUT) = range(7)

# Keyboards
MAIN_MENU_KEYBOARD = [
    [InlineKeyboardButton("üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ", callback_data="menu_nutrition"),
     InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="menu_training")],
    [InlineKeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="menu_progress"),
     InlineKeyboardButton("‚öôÔ∏è –ï—â—ë", callback_data="menu_more")],
]
NUTRITION_MENU_KEYBOARD = [
    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", callback_data="add")],
    [InlineKeyboardButton("üçΩÔ∏è –ü—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_meals")],
    [InlineKeyboardButton("ü•ó –¢–µ–∫—É—â–∞—è –¥–∏–µ—Ç–∞", callback_data="current")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
]
TRAININGS_MENU_KEYBOARD = [
    [InlineKeyboardButton("üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_trainings")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
]
PROGRESS_MENU_KEYBOARD = [
    [InlineKeyboardButton("üöÄ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
    [InlineKeyboardButton("üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="history")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
]
MORE_MENU_KEYBOARD = [
    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="add_activity")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
]

# === HELPERS ===
async def cleanup_chat(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.user_data.get('chat_id')
    messages_to_delete = context.user_data.pop('messages_to_delete', [])
    main_menu_msg_id = context.user_data.pop('main_menu_message_id', None)
    if main_menu_msg_id:
        messages_to_delete.append(main_menu_msg_id)
    if not chat_id or not messages_to_delete:
        return
    for msg_id in set(messages_to_delete):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception:
            pass

def remember_msg(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    lst = context.user_data.setdefault('messages_to_delete', [])
    if message_id not in lst:
        lst.append(message_id)

async def _is_registered(chat_id: int) -> bool:
    try:
        timeout = aiohttp.ClientTimeout(total=12)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(f"{BACKEND_URL}/api/is_registered/{chat_id}") as resp:
                return resp.status == 200
    except aiohttp.ClientError:
        return False

async def _link_code(chat_id: int, code: str) -> tuple[bool, int, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, status, message)
    """
    code = code.strip()
    if not re.fullmatch(r"\d{8}", code):
        return False, 400, "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 8 —Ü–∏—Ñ—Ä."
    try:
        timeout = aiohttp.ClientTimeout(total=20)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(f"{BACKEND_URL}/api/link_telegram",
                                    json={"code": code, "chat_id": chat_id}) as resp:
                if resp.status == 200:
                    return True, 200, "‚úÖ Telegram –ø—Ä–∏–≤—è–∑–∞–Ω! –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é."
                elif resp.status == 409:
                    return False, 409, "‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
                elif resp.status == 404:
                    return False, 404, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                else:
                    txt = await resp.text()
                    logging.error(f"link_telegram failed: {resp.status} - {txt}")
                    return False, resp.status, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except aiohttp.ClientError as e:
        logging.error(f"link_telegram network error: {e}")
        return False, 503, "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# === MENUS ===
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_chat(context)
    text = "üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    reply_markup = InlineKeyboardMarkup(MAIN_MENU_KEYBOARD)
    sent = await update.effective_chat.send_message(text, reply_markup=reply_markup)
    context.user_data['main_menu_message_id'] = sent.message_id
    context.user_data['messages_to_delete'] = []

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        try:
            await query.message.delete()
        except Exception as e:
            logging.warning(f"Could not delete message on back_to_main_menu: {e}")
    await show_main_menu(update, context)
    return SELECT_MENU

# === ENTRY: /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("start() from %s", update.effective_user.id if update.effective_user else "unknown")
    context.user_data.clear()
    context.user_data['chat_id'] = update.effective_chat.id
    context.user_data['messages_to_delete'] = [update.message.message_id]

    chat_id = update.effective_chat.id
    if await _is_registered(chat_id):
        await show_main_menu(update, context)
        return SELECT_MENU

    context.user_data["awaiting_code"] = True
    sent = await update.message.reply_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ *8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥* –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:",
        parse_mode="Markdown"
    )
    remember_msg(context, sent.message_id)
    return ASK_CODE

# === ENTRY: –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –∫–æ–¥ ===
async def open_menu_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    txt = (update.message.text or "").strip()
    logging.info("open_menu_from_text() got: %r from %s", txt, chat_id)

    # –ï—Å–ª–∏ —ç—Ç–æ 8 —Ü–∏—Ñ—Ä ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º —Å–≤—è–∑–∞—Ç—å (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—É—Ç—å)
    if re.fullmatch(r"\d{8}", txt):
        return await handle_code_anywhere(update, context)

    # –∏–Ω–∞—á–µ: –µ—Å–ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –∫–æ–¥
    if await _is_registered(chat_id):
        await show_main_menu(update, context)
        return SELECT_MENU

    context.user_data["awaiting_code"] = True
    sent = await update.message.reply_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ *8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥* –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:",
        parse_mode="Markdown"
    )
    remember_msg(context, sent.message_id)
    return ASK_CODE

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 8-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏ –≤–Ω–µ –µ–≥–æ) ===
async def handle_code_anywhere(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return ASK_CODE
    chat_id = update.effective_chat.id
    code = (msg.text or "").strip()

    # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é
    if await _is_registered(chat_id):
        await show_main_menu(update, context)
        return SELECT_MENU

    waiting = await msg.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥‚Ä¶")
    ok, status, text = await _link_code(chat_id, code)
    try:
        await waiting.delete()
    except Exception:
        pass

    if ok:
        context.user_data.pop("awaiting_code", None)
        await cleanup_chat(context)
        await msg.reply_text(text)
        return ConversationHandler.END

    # –Ω–µ—É—Å–ø–µ—Ö ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    sent = await msg.reply_text(text)
    remember_msg(context, sent.message_id)
    # –ü–æ–¥—Å–∫–∞–∂–µ–º, —á—Ç–æ –∂–¥—ë–º –∏–º–µ–Ω–Ω–æ –∫–æ–¥
    if status in (400, 404):
        hint = await msg.reply_text("üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ä–∞–∑ *8 —Ü–∏—Ñ—Ä* –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.", parse_mode="Markdown")
        remember_msg(context, hint.message_id)
    return ASK_CODE

# === –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ASK_CODE (–¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π) ===
async def verify_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("verify_code() text=%r", (update.message.text or "").strip())
    return await handle_code_anywhere(update, context)

# === Today meals ===
async def show_today_meals(update_or_query: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update_or_query.effective_chat
    chat_id = chat.id
    loading_msg = await chat.send_message("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
    try:
        timeout = aiohttp.ClientTimeout(total=12)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(f"{BACKEND_URL}/api/meals/today/{chat_id}") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    meals = data.get("meals")
                    total_calories = data.get("total_calories")

                    if not meals:
                        text = "ü§∑‚Äç‚ôÇÔ∏è –í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è."
                    else:
                        text = "üçΩÔ∏è *–í–∞—à–∏ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
                        meal_type_map = {
                            'breakfast': 'üç≥ –ó–∞–≤—Ç—Ä–∞–∫',
                            'lunch': 'üçõ –û–±–µ–¥',
                            'dinner': 'üç≤ –£–∂–∏–Ω',
                            'snack': 'ü•ú –ü–µ—Ä–µ–∫—É—Å'
                        }
                        for meal in meals:
                            meal_name = meal.get('name')
                            meal_calories = meal.get('calories')
                            meal_type_rus = meal_type_map.get(meal.get('meal_type'), '–ü—Ä–∏—ë–º –ø–∏—â–∏')
                            text += f"*{meal_type_rus}*: {meal_name} ‚Äî *{meal_calories} –∫–∫–∞–ª*\n"
                        text += f"\nüî• *–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª*"

                    await loading_msg.edit_text(
                        text,
                        parse_mode="Markdown",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]])
                    )
                    remember_msg(context, loading_msg.message_id)
                else:
                    await loading_msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    except aiohttp.ClientError as e:
        logging.error(f"Today's meals loading failed: {e}")
        await loading_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")

# === Trainings ===
async def my_trainings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    chat_id = str(chat.id)
    try:
        timeout = aiohttp.ClientTimeout(total=12)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(f"{BACKEND_URL}/api/trainings/my", params={"chat_id": chat_id}) as resp:
                if resp.status != 200:
                    await chat.send_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
                data = await resp.json()
    except aiohttp.ClientError:
        await chat.send_message("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    items = data.get("items", [])
    if not items:
        await chat.send_message("üèãÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return

    lines = []
    for it in items:
        dt = None
        if it.get("start_time"):
            try:
                dt_utc = datetime.fromisoformat(it["start_time"].replace("Z", "+00:00"))
                dt = dt_utc.astimezone(ALMATY_TZ)
            except Exception:
                dt = None
        when = dt.strftime("%d.%m %H:%M") if dt else "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        title = it.get("title") or "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
        location = it.get("location")
        lines.append(f"‚Ä¢ {when} ‚Äî {title}" + (f" ({location})" if location else ""))

    text = "üèãÔ∏è *–ú–æ–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n" + "\n".join(lines)
    msg = await chat.send_message(text, parse_mode="Markdown")
    remember_msg(context, msg.message_id)

# === Menu selection ===
async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    chat = update.effective_chat

    last_menu_id = context.user_data.pop('main_menu_message_id', None)
    if last_menu_id:
        try:
            await context.bot.delete_message(chat_id=chat.id, message_id=last_menu_id)
        except Exception as e:
            logging.warning(f"Could not delete previous main menu ({last_menu_id}): {e}")

    if data == "menu_nutrition":
        sent = await chat.send_message(
            "üçΩÔ∏è –†–∞–∑–¥–µ–ª *–ü–∏—Ç–∞–Ω–∏–µ* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(NUTRITION_MENU_KEYBOARD)
        )
        remember_msg(context, sent.message_id)
        return SELECT_MENU

    if data == "menu_training":
        sent = await chat.send_message(
            "üèãÔ∏è –†–∞–∑–¥–µ–ª *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(TRAININGS_MENU_KEYBOARD)
        )
        remember_msg(context, sent.message_id)
        return SELECT_MENU

    if data == "menu_progress":
        sent = await chat.send_message(
            "üìà –†–∞–∑–¥–µ–ª *–ü—Ä–æ–≥—Ä–µ—Å—Å*:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(PROGRESS_MENU_KEYBOARD)
        )
        remember_msg(context, sent.message_id)
        return SELECT_MENU

    if data == "menu_more":
        sent = await chat.send_message(
            "‚öôÔ∏è –†–∞–∑–¥–µ–ª *–ï—â—ë*:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(MORE_MENU_KEYBOARD)
        )
        remember_msg(context, sent.message_id)
        return SELECT_MENU

    if data == "add":
        keyboard = [
            [InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="meal_breakfast"),
             InlineKeyboardButton("üçõ –û–±–µ–¥", callback_data="meal_lunch")],
            [InlineKeyboardButton("üç≤ –£–∂–∏–Ω", callback_data="meal_dinner"),
             InlineKeyboardButton("ü•ú –ü–µ—Ä–µ–∫—É—Å", callback_data="meal_snack")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        sent_message = await chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        remember_msg(context, sent_message.message_id)
        return ASK_PHOTO

    if data == "today_meals":
        await show_today_meals(update, context)
        return SELECT_MENU

    if data == "add_activity":
        return await show_activity_prompt(update, context)

    if data == "progress":
        await show_progress(update, context)
        return SELECT_MENU

    if data == "history":
        return await show_history_menu(update, context)

    if data == "current":
        loading_msg = await chat.send_message("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É –¥–∏–µ—Ç—É...")
        try:
            timeout = aiohttp.ClientTimeout(total=12)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(f"{BACKEND_URL}/api/current_diet/{chat.id}") as resp:
                    if resp.status == 200:
                        diet = await resp.json()
                        text = f"ü•ó *–í–∞—à–∞ –¥–∏–µ—Ç–∞ –Ω–∞ {diet['date']}*\n\n"
                        for meal_type, meal_name in [("breakfast", "–ó–∞–≤—Ç—Ä–∞–∫"), ("lunch", "–û–±–µ–¥"), ("dinner", "–£–∂–∏–Ω"), ("snack", "–ü–µ—Ä–µ–∫—É—Å")]:
                            text += f"*{meal_name}*:\n"
                            items = diet.get(meal_type)
                            if items:
                                for item in items:
                                    text += f"- {item['name']} ({item['grams']} –≥, {item['kcal']} –∫–∫–∞–ª)\n"
                            else:
                                text += "- –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                            text += "\n"
                        text += (f"–ò—Ç–æ–≥–æ: *{diet['total_kcal']} –∫–∫–∞–ª* (–ë: {diet['protein']} –≥, –ñ: {diet['fat']} –≥, –£: {diet['carbs']} –≥)")
                        await loading_msg.edit_text(text, parse_mode="Markdown")
                        remember_msg(context, loading_msg.message_id)
                    elif resp.status == 404:
                        await loading_msg.edit_text("ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∏–µ—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ.")
                    else:
                        await loading_msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–µ—Ç—ã.")
        except aiohttp.ClientError as e:
            logging.error(f"Diet loading failed: {e}")
            await loading_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–µ—Ç—É.")

        await show_main_menu(update, context)
        return SELECT_MENU

    if data == "my_trainings":
        await my_trainings(update, context)
        await show_main_menu(update, context)
        return SELECT_MENU

    await show_main_menu(update, context)
    return SELECT_MENU

# === Ask photo for chosen meal ===
async def ask_photo_for_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_main":
        await query.message.delete()
        return await back_to_main_menu(update, context)

    context.user_data["meal_type"] = query.data.split('_')[1]
    await query.edit_message_text(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
    )
    return ASK_PHOTO

# === Photo processing ===
async def process_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    remember_msg(context, update.message.message_id)

    old_ids = context.user_data.get('messages_to_delete', [])
    if old_ids:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=old_ids[0])
            context.user_data['messages_to_delete'] = old_ids[1:]
        except Exception:
            pass

    analyzing_msg = await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥...")

    file_id = update.message.photo[-1].file_id
    try:
        photo_file = await context.bot.get_file(file_id)
        photo_bytes = await photo_file.download_as_bytearray()

        form_data = aiohttp.FormData()
        form_data.add_field('file', photo_bytes, filename='meal.jpg', content_type='image/jpeg')
        form_data.add_field('chat_id', str(update.effective_chat.id))

        timeout = aiohttp.ClientTimeout(total=45)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            # subscription check
            async with session.get(f"{BACKEND_URL}/api/subscription/status", params={"chat_id": str(update.effective_chat.id)}) as s:
                if s.status == 200:
                    sub = await s.json()
                    if not sub.get("has_subscription"):
                        await analyzing_msg.delete()
                        await update.message.reply_text(
                            "üîí –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                            "‚úçÔ∏è –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:\n"
                            "¬´–≥—Ä–µ—á–∫–∞ 150 –≥, –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 120 –≥, —Å–∞–ª–∞—Ç 80 –≥¬ª."
                        )
                        await show_main_menu(update, context)
                        return SELECT_MENU
                else:
                    await analyzing_msg.delete()
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—ë–º –ø–∏—â–∏ –≤—Ä—É—á–Ω—É—é.")
                    await show_main_menu(update, context)
                    return SELECT_MENU

            async with session.post(f"{BACKEND_URL}/analyze_meal_photo", data=form_data) as resp:
                await analyzing_msg.delete()
                if resp.status == 200:
                    result_data = await resp.json()
                    context.user_data["analysis_result"] = result_data

                    text = (f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:*\n\n"
                            f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{result_data.get('name', 'N/A')}*\n"
                            f"–í–µ—Ä–¥–∏–∫—Ç: *{result_data.get('verdict', 'N/A')}*\n\n"
                            f"–ö–∞–ª–æ—Ä–∏–∏: *{result_data.get('calories', 0)} –∫–∫–∞–ª*\n"
                            f"–ë–µ–ª–∫–∏: {result_data.get('protein', 0.0)} –≥\n"
                            f"–ñ–∏—Ä—ã: {result_data.get('fat', 0.0)} –≥\n"
                            f"–£–≥–ª–µ–≤–æ–¥—ã: {result_data.get('carbs', 0.0)} –≥\n\n"
                            f"_{result_data.get('analysis', '')}_")
                    kb = [[InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_yes"),
                           InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="save_no")]]
                    result_msg = await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode="Markdown")
                    remember_msg(context, result_msg.message_id)
                    return HANDLE_SAVE
                else:
                    error_text = await resp.text()
                    logging.error(f"Backend photo analysis failed: {resp.status} - {error_text}")
                    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ–∑–∂–µ.")
                    await show_main_menu(update, context)
                    return SELECT_MENU

    except Exception as e:
        logging.error(f"Failed to process photo: {e}")
        try:
            await analyzing_msg.delete()
        except Exception:
            pass
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_PHOTO

# === Save confirmation ===
async def handle_save_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "save_no":
        await query.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await show_main_menu(update, context)
        return SELECT_MENU

    chat_id = update.effective_chat.id
    meal_type = context.user_data.get("meal_type")
    analysis_result = context.user_data.get("analysis_result")

    if not meal_type or not analysis_result:
        await query.message.reply_text("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await show_main_menu(update, context)
        return SELECT_MENU

    payload = {"chat_id": chat_id, "meal_type": meal_type, **analysis_result}

    try:
        timeout = aiohttp.ClientTimeout(total=20)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(f"{BACKEND_URL}/api/log_meal", json=payload) as resp:
                if resp.status == 200:
                    await query.message.edit_text("‚úÖ –ü—Ä–∏—ë–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                    await show_main_menu(update, context)
                    return SELECT_MENU
                elif resp.status == 409:
                    kb = [[InlineKeyboardButton("–î–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", callback_data="overwrite_yes"),
                           InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="overwrite_no")]]
                    await query.message.edit_text(
                        f"ü•£ –ü—Ä–∏—ë–º –ø–∏—â–∏ '{meal_type}' –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?",
                        reply_markup=InlineKeyboardMarkup(kb)
                    )
                    return OVERWRITE_CONFIRM
                else:
                    error_text = await resp.text()
                    logging.error(f"Backend save failed: {resp.status} - {error_text}")
                    await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
                    await show_main_menu(update, context)
                    return SELECT_MENU
    except aiohttp.ClientError as e:
        logging.error(f"Save failed (network): {e}")
        await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        await show_main_menu(update, context)
        return SELECT_MENU

async def handle_overwrite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "overwrite_no":
        await query.message.edit_text("‚ùå –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await show_main_menu(update, context)
        return SELECT_MENU

    chat_id = update.effective_chat.id
    meal_type = context.user_data.get("meal_type")
    analysis_result = context.user_data.get("analysis_result")

    payload = {"chat_id": chat_id, "meal_type": meal_type}
    save_payload = {"chat_id": chat_id, "meal_type": meal_type, **analysis_result}

    try:
        timeout = aiohttp.ClientTimeout(total=20)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.delete(f"{BACKEND_URL}/api/log_meal", json=payload) as del_resp:
                if del_resp.status not in [200, 204, 404]:
                    await query.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    await show_main_menu(update, context)
                    return SELECT_MENU
            async with aiohttp.ClientSession(timeout=timeout) as session2:
                async with session2.post(f"{BACKEND_URL}/api/log_meal", json=save_payload) as post_resp:
                    if post_resp.status == 200:
                        await query.message.edit_text("üîÑ –ü—Ä–∏—ë–º –ø–∏—â–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")
                    else:
                        await query.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è.")
    except aiohttp.ClientError as e:
        logging.error(f"Overwrite failed (network): {e}")
        await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.")

    await show_main_menu(update, context)
    return SELECT_MENU

# === Cancel ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_chat(context)
    if update.message:
        await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif update.callback_query:
        await update.callback_query.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await show_main_menu(update, context)
    context.user_data.clear()
    return await back_to_main_menu(update, context)

# === Progress & History ===
async def show_progress(update_or_query: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update_or_query.effective_chat
    chat_id = chat.id
    loading_msg = await chat.send_message("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å...")

    try:
        timeout = aiohttp.ClientTimeout(total=12)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(f"{BACKEND_URL}/api/user_progress/{chat_id}") as resp:
                if resp.status != 200:
                    try:
                        data = await resp.json()
                        error_msg = data.get("error", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
                    except Exception:
                        error_msg = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
                    await loading_msg.edit_text(f"‚ö†Ô∏è {error_msg}")
                    return
                data = await resp.json()
    except aiohttp.ClientError as e:
        logging.error(f"Progress loading failed: {e}")
        await loading_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")
        return

    await loading_msg.delete()
    latest = data.get("latest")
    previous = data.get("previous")

    if not latest:
        await chat.send_message(
            "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]])
        )
        return

    text = f"üöÄ *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å (–∑–∞–º–µ—Ä –æ—Ç {latest['date']})*\n\n"
    text += f"‚öñÔ∏è –í–µ—Å: *{latest.get('weight', 'N/A')} –∫–≥*\n"
    text += f"üßà –ñ–∏—Ä–æ–≤–∞—è –º–∞—Å—Å–∞: *{latest.get('fat_mass', 'N/A')} –∫–≥*\n"
    text += f"üí™ –ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞: *{latest.get('muscle_mass', 'N/A')} –∫–≥*\n"

    if previous:
        def get_diff_str(latest_val, prev_val):
            if latest_val is None or prev_val is None:
                return "‚Äì –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            diff = latest_val - prev_val
            if diff > 0.01: return f"üî∫ +{diff:.1f}"
            if diff < -0.01: return f"‚úÖ {diff:.1f}"
            return "‚Äì –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

        text += f"\n*–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–º–µ—Ä–∞ ({previous['date']})*:\n"
        text += f"‚öñÔ∏è –í–µ—Å: {get_diff_str(latest.get('weight'), previous.get('weight'))}\n"
        text += f"üßà –ñ–∏—Ä: {get_diff_str(latest.get('fat_mass'), previous.get('fat_mass'))}\n"
        text += f"üí™ –ú—ã—à—Ü—ã: {get_diff_str(latest.get('muscle_mass'), previous.get('muscle_mass'))}"

    msg = await chat.send_message(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]])
    )
    remember_msg(context, msg.message_id)

async def show_history_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üçΩÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è", callback_data="history_meals_1")],
        [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="history_activity_1")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    text = "üìú –ö–∞–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?"

    chat = update.effective_chat
    if query and query.message:
        try:
            await query.message.delete()
        except Exception:
            pass

    sent_message = await chat.send_message(text, reply_markup=InlineKeyboardMarkup(keyboard))
    remember_msg(context, sent_message.message_id)
    return HISTORY_MENU

async def handle_history_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id

    try:
        _, history_type, page_str = query.data.split("_")
        page = int(page_str)
    except (ValueError, IndexError):
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        return HISTORY_MENU

    api_endpoint = "meal_history" if history_type == "meals" else "activity_history"
    title = "–ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è" if history_type == "meals" else "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

    try:
        timeout = aiohttp.ClientTimeout(total=12)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(f"{BACKEND_URL}/api/{api_endpoint}/{chat_id}?page={page}") as resp:
                if resp.status != 200:
                    await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
                    return HISTORY_MENU
                data = await resp.json()
    except aiohttp.ClientError as e:
        logging.error(f"History loading failed: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.")
        return HISTORY_MENU

    text = f"üìú *{title} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page})*\n\n"
    days = data.get("days", [])
    if not days:
        text += "–ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ."
    else:
        for day in days:
            if history_type == "meals":
                text += f"*{day['date']}*: {day['total_calories']} –∫–∫–∞–ª ({day['meal_count']} –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏)\n"
            else:
                text += f"*{day['date']}*: {day['steps']} —à–∞–≥–æ–≤, {day['active_kcal']} –∫–∫–∞–ª\n"

    nav_buttons = []
    if data.get("has_prev"):
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_{history_type}_{page - 1}"))
    if data.get("has_next"):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"history_{history_type}_{page + 1}"))

    keyboard_layout = [
        nav_buttons,
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—Ä–∏–∏", callback_data="back_to_history")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard_layout), parse_mode="Markdown")
    return HISTORY_MENU

# === Evening reminders at 21:00 ===
async def remind_missing_meals(app: Application):
    logging.info("Running scheduled job: evening reminders")
    today_local_str = datetime.now(ZoneInfo(TIMEZONE)).strftime("%d.%m.%Y")

    try:
        timeout = aiohttp.ClientTimeout(total=12)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(f"{BACKEND_URL}/api/registered_chats") as resp:
                if resp.status != 200:
                    logging.warning("registered_chats failed")
                    return
                reg = await resp.json()
                chat_ids = reg.get("chat_ids", [])

            for chat_id in chat_ids:
                meals_missing = True
                try:
                    async with session.get(f"{BACKEND_URL}/api/meals/today/{chat_id}") as r_meal:
                        if r_meal.status == 200:
                            d = await r_meal.json()
                            total = d.get("total_calories", 0) or 0
                            meals_missing = (total == 0)
                except Exception as e:
                    logging.warning(f"meals check failed for {chat_id}: {e}")

                activity_missing = True
                try:
                    async with session.get(f"{BACKEND_URL}/api/activity/today/{chat_id}") as r_act:
                        if r_act.status == 200:
                            a = await r_act.json()
                            activity_missing = (not a.get("present"))
                        else:
                            async with session.get(f"{BACKEND_URL}/api/activity_history/{chat_id}?page=1") as r_hist:
                                if r_hist.status == 200:
                                    h = await r_hist.json()
                                    days = h.get("days", [])
                                    if days and days[0].get("date") == today_local_str:
                                        activity_missing = False
                except Exception as e:
                    logging.warning(f"activity check failed for {chat_id}: {e}")

                if meals_missing or activity_missing:
                    parts = ["üåô *–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*"]
                    if meals_missing:
                        parts.append("üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏.")
                    if activity_missing:
                        parts.append("üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

                    text = "\n\n".join(parts)
                    kb = []
                    if activity_missing:
                        kb.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="add_activity")])
                    if meals_missing:
                        kb.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", callback_data="add")])

                    try:
                        await app.bot.send_message(
                            chat_id=chat_id,
                            text=text + "\n\nüìå –≠—Ç–æ –∑–∞–π–º—ë—Ç –º–∏–Ω—É—Ç—É ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–æ—á–Ω–µ–µ —Å—á–∏—Ç–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç üí™",
                            parse_mode="Markdown",
                            reply_markup=InlineKeyboardMarkup(kb) if kb else None
                        )
                    except Exception as e:
                        logging.warning(f"send reminder failed {chat_id}: {e}")

    except Exception as e:
        logging.error(f"evening reminders error: {e}")

# === Activity input ===
async def show_activity_prompt(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    if hasattr(update_or_query, "callback_query") and update_or_query.callback_query:
        q = update_or_query.callback_query
        await q.answer()
        chat = update_or_query.effective_chat
        try:
            await q.message.delete()
        except Exception:
            pass
        msg = await chat.send_message(
            "üìù –í–≤–µ–¥–∏—Ç–µ *–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏* –∏ *—à–∞–≥–∏* –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ `450 8200`\n‚Ä¢ `–∫–∫–∞–ª 520, —à–∞–≥–∏ 9000`\n\n"
            "_–ú–æ–∂–Ω–æ –ª—é–±—ã–º –ø–æ—Ä—è–¥–∫–æ–º, —è —Å–∞–º —Ä–∞–∑–±–µ—Ä—É._",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]])
        )
    else:
        chat = update_or_query.effective_chat
        msg = await chat.send_message(
            "üìù –í–≤–µ–¥–∏—Ç–µ *–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏* –∏ *—à–∞–≥–∏* –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ `450 8200`\n‚Ä¢ `–∫–∫–∞–ª 520, —à–∞–≥–∏ 9000`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]])
        )
    remember_msg(context, msg.message_id)
    return ACTIVITY_INPUT

async def handle_activity_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").replace(",", " ")
    nums = re.findall(r"\d+", text)
    if len(nums) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ù—É–∂–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞: –∫–∫–∞–ª –∏ —à–∞–≥–∏. –ü—Ä–∏–º–µ—Ä: `480 9500`", parse_mode="Markdown")
        return ACTIVITY_INPUT

    a, b = int(nums[0]), int(nums[1])
    active_kcal, steps = (a, b) if a < b else (b, a)

    loading = await update.message.reply_text("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...")
    payload = {"chat_id": update.effective_chat.id, "active_kcal": active_kcal, "steps": steps}

    try:
        timeout = aiohttp.ClientTimeout(total=12)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(f"{BACKEND_URL}/api/activity/log", json=payload) as resp:
                if resp.status == 200:
                    await loading.edit_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{active_kcal}* –∫–∫–∞–ª, *{steps}* —à–∞–≥–æ–≤.", parse_mode="Markdown")
                else:
                    err = await resp.text()
                    logging.error(f"activity save failed: {resp.status} - {err}")
                    await loading.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except aiohttp.ClientError as e:
        logging.error(f"activity save network error: {e}")
        await loading.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await show_main_menu(update, context)
    return SELECT_MENU

# === Startup ===
async def on_startup(app: Application):
    try:
        await app.bot.set_my_commands([("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"), ("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é")])
    except TimedOut:
        logging.warning("set_my_commands timed out, retrying in 2s‚Ä¶")
        await asyncio.sleep(2)
        try:
            await app.bot.set_my_commands([("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"), ("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é")])
        except Exception as e:
            logging.error(f"set_my_commands failed: {e}")
    except (NetworkError, TelegramError) as e:
        logging.error(f"set_my_commands error: {e}")

    try:
        await app.bot.delete_webhook(drop_pending_updates=False)
    except TimedOut:
        logging.warning("delete_webhook timed out; ignore")
    except (NetworkError, TelegramError) as e:
        logging.warning(f"delete_webhook error: {e}")

    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(remind_missing_meals, 'cron', hour=21, minute=11, args=[app])
    scheduler.start()
    logging.info("APScheduler started.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Update {update} caused error {context.error}")

# === MAIN ===
def main():
    if not app_token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

    request = HTTPXRequest(
        connection_pool_size=50,
        connect_timeout=15.0,
        read_timeout=30.0,
        write_timeout=30.0,
        pool_timeout=5.0,
    )

    application = Application.builder().token(app_token).request(request).post_init(on_startup).build()

    # --- Conversation ---
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π –±–µ—Å–µ–¥—ã: –æ—Ç–∫—Ä–æ–µ–º –º–µ–Ω—é –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω, –∏–Ω–∞—á–µ –ø–æ–ø—Ä–æ—Å–∏–º –∫–æ–¥.
            MessageHandler(filters.TEXT & ~filters.COMMAND, open_menu_from_text),
            # –ö–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            CallbackQueryHandler(handle_menu_selection,
                                 pattern=r"^(menu_nutrition|menu_training|menu_progress|menu_more|add|add_activity|today_meals|progress|history|current|my_trainings)$"),
            CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$"),
        ],
        states={
            ASK_CODE: [
                # –ø—Ä–∏–Ω–∏–º–∞–µ–º 8 —Ü–∏—Ñ—Ä –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ
                MessageHandler(filters.Regex(r"^\s*\d{8}\s*$"), verify_code),
                # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —Å—é–¥–∞ —Ç–æ–∂–µ –ø—Ä–∏–ª–µ—Ç–∏—Ç
                MessageHandler(filters.TEXT & ~filters.COMMAND, verify_code),
                CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$"),
            ],
            SELECT_MENU: [
                CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$"),
                CallbackQueryHandler(handle_menu_selection),
            ],
            ACTIVITY_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_activity_input),
                CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$")
            ],
            ASK_PHOTO: [
                CallbackQueryHandler(ask_photo_for_meal, pattern=r"^meal_"),
                MessageHandler(filters.PHOTO, process_photo),
                CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$")
            ],
            HANDLE_SAVE: [CallbackQueryHandler(handle_save_confirmation, pattern=r"^save_")],
            OVERWRITE_CONFIRM: [CallbackQueryHandler(handle_overwrite, pattern=r"^overwrite_")],
            HISTORY_MENU: [
                CallbackQueryHandler(handle_history_pagination, pattern=r"^history_"),
                CallbackQueryHandler(show_history_menu, pattern=r"^back_to_history$"),
                CallbackQueryHandler(back_to_main_menu, pattern=r"^back_to_main$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        # per_message=False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —ç—Ç–æ –æ–∫, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≤–µ—Ü 8-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–µ—Å–µ–¥–µ/—Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    application.add_handler(MessageHandler(filters.Regex(r"^\s*\d{8}\s*$") & ~filters.COMMAND, handle_code_anywhere))

    # –î–æ–ø. –∫–æ–º–∞–Ω–¥–∞ –≤–Ω–µ –±–µ—Å–µ–¥—ã
    application.add_handler(CommandHandler("my_trainings", my_trainings))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=False, poll_interval=1.0)

if __name__ == "__main__":
    main()
