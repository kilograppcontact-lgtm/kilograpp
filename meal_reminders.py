# meal_reminders.py
import os
import requests
from datetime import datetime
from zoneinfo import ZoneInfo

from apscheduler.schedulers.background import BackgroundScheduler
from flask import current_app

from extensions import db
from models import User, UserSettings, MealReminderLog

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
MEAL_SCHEDULE = {
    "breakfast": ("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "09:11"),
    "lunch":     ("üç≤ –û–±–µ–¥",    "12:00"),
    "dinner":    ("üçù –£–∂–∏–Ω",    "18:00"),
}

_scheduler = None


def _send_telegram_message(token: str, chat_id: int | str, text: str, reply_markup: dict | None = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram; –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ reply_markup."""
    try:
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup

        resp = requests.post(
            f"https://api.telegram.org/bot{token}/sendMessage",
            json=payload,
            timeout=10,
        )
        return resp.ok
    except Exception:
        return False


def _should_send_for_user(user, now_local: datetime, meal_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º: –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ –∏ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç–æ—Ç —Ç–∏–ø."""
    s: UserSettings | None = getattr(user, "settings", None)
    if not s:
        return False
    if not s.telegram_notify_enabled or not s.notify_meals:
        return False
    if not user.telegram_chat_id:
        return False

    # –°–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ HH:MM —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    _, hhmm = MEAL_SCHEDULE[meal_key]
    if now_local.strftime("%H:%M") != hhmm:
        return False

    # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è?
    exists = MealReminderLog.query.filter_by(
        user_id=user.id, meal_type=meal_key, date_sent=now_local.date()
    ).first()

    return exists is None


def _message_for(meal_key: str) -> str:
    title, _ = MEAL_SCHEDULE[meal_key]
    return (
        f"{title}: —Å–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏!\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ."
    )


def _keyboard_for(meal_key: str, base_url: str | None) -> dict:
    """Inline-–∫–Ω–æ–ø–∫–∏: 1) –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏—ë–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞, 2) –æ—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —Å–∞–π—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å URL)."""
    # –∫—Ä–∞—Å–∏–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏
    meal_names = {"breakfast": "–∑–∞–≤—Ç—Ä–∞–∫", "lunch": "–æ–±–µ–¥", "dinner": "—É–∂–∏–Ω"}
    add_btn_text = f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {meal_names.get(meal_key, '–ø—Ä–∏—ë–º')}"

    rows = [
        [{"text": add_btn_text, "callback_data": f"meal_{meal_key}"}],
    ]
    if base_url:
        rows.append([{"text": "–û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ /meals", "url": f"{base_url}/meals"}])

    return {"inline_keyboard": rows}


def _tick():
    app = current_app._get_current_object()
    token = (
        app.config.get("TELEGRAM_BOT_TOKEN")
        or os.getenv("TELEGRAM_BOT_TOKEN")
        or os.getenv("TELEGRAM_TOKEN")
    )
    if not token:
        return

    # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
    base_url = (app.config.get("PUBLIC_BASE_URL") or "").rstrip("/") or None

    # –ë–µ—Ä—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    users = (
        User.query
        .join(UserSettings, UserSettings.user_id == User.id)
        .filter(
            User.telegram_chat_id.isnot(None),
            UserSettings.telegram_notify_enabled.is_(True),
            UserSettings.notify_meals.is_(True),
        ).all()
    )

    for user in users:
        tz = ZoneInfo("Asia/Almaty")
        now_local = datetime.now(tz)

        for meal_key in ("breakfast", "lunch", "dinner"):
            if _should_send_for_user(user, now_local, meal_key):
                text = _message_for(meal_key)
                markup = _keyboard_for(meal_key, base_url)
                ok = _send_telegram_message(token, user.telegram_chat_id, text, reply_markup=markup)
                if ok:
                    db.session.add(MealReminderLog(
                        user_id=user.id, meal_type=meal_key, date_sent=now_local.date()
                    ))

    try:
        db.session.commit()
    except Exception:
        db.session.rollback()


def start_meal_scheduler(app):
    global _scheduler
    if _scheduler:
        return _scheduler

    _scheduler = BackgroundScheduler(timezone="Asia/Almaty")

    def _job():
        # –¥–∞—ë–º Flask-–∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –¥–∂–æ–±—ã
        with app.app_context():
            _tick()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ–µ HH:MM –ê–ª–º–∞—Ç—ã
    _scheduler.add_job(_job, "interval", minutes=1, id="meal-reminders")
    _scheduler.start()
    return _scheduler
