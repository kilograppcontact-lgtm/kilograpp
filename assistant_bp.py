# assistant.py
import os
import logging
from datetime import datetime
from flask import Blueprint, request, jsonify, session
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()
logger = logging.getLogger(__name__)

# === OpenAI / –º–æ–¥–µ–ª—å ===
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY not set in environment. OpenAI calls will fail.")

MODEL_NAME = os.getenv("KILOGRAI_MODEL", "gpt-4o")
CLASSIFICATION_TEMPERATURE = float(os.getenv("KILOGRAI_CLASSIFY_TEMPERATURE", "0.3"))
CLASSIFICATION_MAX_TOKENS = int(os.getenv("KILOGRAI_CLASSIFY_MAX_TOKENS", "16"))
DEFAULT_TEMPERATURE = float(os.getenv("KILOGRAI_TEMPERATURE", "0.5"))
DEFAULT_MAX_TOKENS = int(os.getenv("KILOGRAI_MAX_TOKENS", "400"))

DIET_TEMPERATURE = float(os.getenv("KILOGRAI_DIET_TEMPERATURE", "0.35"))
DIET_MAX_TOKENS = int(os.getenv("KILOGRAI_DIET_MAX_TOKENS", "500"))

BODY_TEMPERATURE = float(os.getenv("KILOGRAI_BODY_TEMPERATURE", "0.35"))
BODY_MAX_TOKENS = int(os.getenv("KILOGRAI_BODY_MAX_TOKENS", "500"))

client = OpenAI(api_key=OPENAI_API_KEY)
assistant_bp = Blueprint('assistant', __name__)

# ------------------------------------------------------------------
# –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
# ------------------------------------------------------------------
PLATFORM_CONTEXT = """
–≠—Ç–æ —Ç–≤–æ—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Kilogr.app. –¢—ã –∑–Ω–∞–µ—à—å –≤—Å—ë –æ–± —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ –∫–∞–∫ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.

## üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- üéØ –ü—Ä–æ—Ñ–∏–ª—å, üë§ –ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–∞, ü•ó AI-–î–∏–µ—Ç–∞, üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –µ–¥—ã –ø–æ —Ñ–æ—Ç–æ, üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, üí¨ –ì—Ä—É–ø–ø—ã, ‚ú® AI-–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, üí≥ –ü–æ–¥–ø–∏—Å–∫–∞, ü§ñ Telegram-–ë–æ—Ç.
(–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.)
"""

SYSTEM_PROMPT = f"""
–¢—ã ‚Äî Kilo, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Kilogr.app.  –¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å –∏—Ö —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π —Å —É–ª—ã–±–∫–æ–π! üòä

---
–¢–í–û–ò –ü–†–ê–í–ò–õ–ê:

1.  **–ë—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ Kilogr.app:** –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π, —á—Ç–æ–±—ã —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
2.  **–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º:** –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω –∏ —Å–º–∞–π–ª–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üí™, ü•ó, ‚ú®, üéØ), —á—Ç–æ–±—ã –æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ª–µ–≥–∫–∏–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º.
3.  **–¢–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ:** –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Kilogr.app, —Ñ–∏—Ç–Ω–µ—Å–æ–º –∏ –ø–∏—Ç–∞–Ω–∏–µ–º. –ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å.
4.  **–ß–µ—Ç–∫–æ—Å—Ç—å –∏ –∫—Ä–∞—Ç–∫–æ—Å—Ç—å:** –î–∞–≤–∞–π –ø—Ä—è–º—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ò–∑–±–µ–≥–∞–π "–≤–æ–¥—ã". –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π Markdown (—Å–ø–∏—Å–∫–∏, –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç), —á—Ç–æ–±—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ª–µ–≥–∫–∏–º –¥–ª—è —á—Ç–µ–Ω–∏—è.
5.  **–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:** –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–∫–∞–∫ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Å–≤–æ–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
6.  **–¢–≤–æ—è —Ü–µ–ª—å:** –°–¥–µ–ª–∞—Ç—å –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–¥–æ—Ä–æ–≤—å—é –ø—Ä–æ—â–µ –∏ –ø—Ä–∏—è—Ç–Ω–µ–µ. –ü–æ–¥–±–∞–¥—Ä–∏–≤–∞–π –∏ –ø–æ–º–æ–≥–∞–π!

---
–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞-–¥–µ—Ç–µ–∫—Ç–æ—Ä—ã (classification-by-prompt):

1) **–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ–Ω—Ç—ã:** 
–ï—Å–ª–∏ –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ä–∞–±–æ—Ç–µ —Å —Ç–µ–∫—É—â–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –¥–∏–µ—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
(–∑–∞–º–µ–Ω–∞ –±–ª—é–¥–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏–µ—Ç–µ, –ø—Ä–æ—Å—å–±–∞ –∏–∑–º–µ–Ω–∏—Ç—å/–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω, –≤–æ–ø—Ä–æ—Å—ã "—á–µ–º –∑–∞–º–µ–Ω–∏—Ç—å", "–∑–∞–º–µ–Ω–∏—Ç—å –≤ –¥–∏–µ—Ç–µ", "–≤ –º–æ–µ–π –¥–∏–µ—Ç–µ" –∏ —Ç.–ø.), 
—Ç—ã **–Ω–µ** –¥–∞—ë—à—å –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Ç—ã **–≤—Å–µ–≥–¥–∞** –æ—Ç–≤–µ—á–∞–µ—à—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:

–î–∏–µ—Ç–∞

–ù–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –≤ –æ—Ç–≤–µ—Ç–µ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ.

2) **–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (body metrics) –∏–Ω—Ç–µ–Ω—Ç—ã:**
–ï—Å–ª–∏ –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–æ–±—Ä–∞—Ç—å/–æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–µ–ª–∞ (–≤–µ—Å–∞, %–∂–∏—Ä–∞, –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã, –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞, BMI, –≤–æ–∑—Ä–∞—Å—Ç —Ç–µ–ª–∞ –∏ —Ç.–ø.), 
—Ç—ã **–≤—Å–µ–≥–¥–∞** –æ—Ç–≤–µ—á–∞–µ—à—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:

–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏

–ù–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –≤ –æ—Ç–≤–µ—Ç–µ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ.

---
–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä —É–≤–∏–¥–∏—Ç –º–∞—Ä–∫–µ—Ä `–î–∏–µ—Ç–∞` –∏–ª–∏ `–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏`, –æ–Ω:
- –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ä–∫–µ—Ä –≤ –∏—Å—Ç–æ—Ä–∏–∏,
- –ø–æ–ª—É—á–∞–µ—Ç –∏–∑ –ë–î —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (Diet –∏–ª–∏ BodyAnalysis) + –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
- —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–º–ø—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏,
- —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç **—Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–æ–π** (–ø–æ–ª–µ–∑–Ω—ã–π) –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
---

{PLATFORM_CONTEXT}
"""

# ------------------------------------------------------------------
# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ (User, Diet, BodyAnalysis, db)
# ------------------------------------------------------------------
try:
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'models' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
    from models import User, Diet, BodyAnalysis, db
except Exception as _e:
    User = None
    Diet = None
    BodyAnalysis = None
    db = None
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ User/Diet/BodyAnalysis/db ‚Äî –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ (from models import ...).")


# ------------------------------------------------------------------
# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–æ–∫
# ------------------------------------------------------------------
def _format_diet_summary(diet_obj):
    if not diet_obj:
        return "–î–∏–µ—Ç–∞ –ø—É—Å—Ç–∞."
    parts = []
    if getattr(diet_obj, "breakfast", None):
        parts.append(f"–ó–∞–≤—Ç—Ä–∞–∫: {diet_obj.breakfast}")
    if getattr(diet_obj, "lunch", None):
        parts.append(f"–û–±–µ–¥: {diet_obj.lunch}")
    if getattr(diet_obj, "dinner", None):
        parts.append(f"–£–∂–∏–Ω: {diet_obj.dinner}")
    if getattr(diet_obj, "snack", None):
        parts.append(f"–ü–µ—Ä–µ–∫—É—Å: {diet_obj.snack}")
    kcal = getattr(diet_obj, "total_kcal", None)
    protein = getattr(diet_obj, "protein", None)
    fat = getattr(diet_obj, "fat", None)
    carbs = getattr(diet_obj, "carbs", None)
    summary = "\n".join(parts) or "–î–∏–µ—Ç–∞ –ø—É—Å—Ç–∞."
    if any(v is not None for v in (kcal, protein, fat, carbs)):
        summary += f"\n–ò—Ç–æ–≥–æ: {kcal or 0} –∫–∫–∞–ª, –ë: {protein or 0} –≥, –ñ: {fat or 0} –≥, –£: {carbs or 0} –≥"
    return summary


def _format_body_summary(ba_obj):
    if not ba_obj:
        return "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    lines = []
    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ–ª—è –∏ –ø–µ—á–∞—Ç–∞–µ–º –∏—Ö –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
    def g(name):
        return getattr(ba_obj, name, None)
    fields = [
        ("–î–∞—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è", getattr(ba_obj, "timestamp", None)),
        ("–†–æ—Å—Ç (—Å–º)", g("height")),
        ("–í–µ—Å (–∫–≥)", g("weight")),
        ("–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞ (–∫–≥)", g("muscle_mass")),
        ("% –º—ã—à—Ü", g("muscle_percentage")),
        ("–í–æ–¥–Ω–æ—Å—Ç—å —Ç–µ–ª–∞ (%)", g("body_water")),
        ("% –±–µ–ª–∫–∞", g("protein_percentage")),
        ("% –º–∏–Ω–µ—Ä–∞–ª—å–Ω–æ–π –º–∞—Å—Å—ã –∫–æ—Å—Ç–µ–π", g("bone_mineral_percentage")),
        ("–°–∫–µ–ª–µ—Ç–Ω–∞—è –º—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞ (SMM)", g("skeletal_muscle_mass")),
        ("–í–∏—Å—Ü–µ—Ä–∞–ª—å–Ω—ã–π –∂–∏—Ä (–æ—Ü–µ–Ω–∫–∞)", g("visceral_fat_rating")),
        ("–ú–µ—Ç–∞–±–æ–ª–∏–∑–º (BMR)", g("metabolism")),
        ("–¢–∞–ª–∏–µ–≤–æ-–±–µ–¥—Ä–µ–Ω–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ (WHR)", g("waist_hip_ratio")),
        ("–í–æ–∑—Ä–∞—Å—Ç —Ç–µ–ª–∞", g("body_age")),
        ("–ñ–∏—Ä–æ–≤–∞—è –º–∞—Å—Å–∞ (–∫–≥)", g("fat_mass")),
        ("BMI", g("bmi")),
        ("–ë–µ–∑–∂–∏—Ä–æ–≤–∞—è –º–∞—Å—Å–∞ (–∫–≥)", g("fat_free_body_weight"))
    ]
    for label, val in fields:
        if val is None:
            continue
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º datetime –∫—Ä–∞—Å–∏–≤–æ
        if isinstance(val, datetime):
            val = val.isoformat(sep=' ', timespec='seconds')
        lines.append(f"- **{label}**: {val}")
    return "\n".join(lines) or "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞ –ø—É—Å—Ç—ã."


# ------------------------------------------------------------------
# –•–µ–ª–ø–µ—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ OpenAI
# ------------------------------------------------------------------
def _call_openai(messages, temperature=0.5, max_tokens=400, model=MODEL_NAME):
    try:
        resp = client.chat.completions.create(
            model=model,
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logger.exception("OpenAI call failed: %s", e)
        return None


# ------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã: /assistant/chat, /assistant/history, /assistant/clear
# ------------------------------------------------------------------
@assistant_bp.route('/assistant/chat', methods=['POST'])
def handle_chat():
    data = request.json or {}
    user_message = (data.get('message') or '').strip()
    if not user_message:
        return jsonify({"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400

    # –ò—Å—Ç–æ—Ä–∏—è –≤ —Å–µ—Å—Å–∏–∏
    chat_history = session.get('chat_history', [])
    # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º user message (–±—É–¥–µ—Ç –≤ messages_for_api)
    chat_history.append({"role": "user", "content": user_message})
    chat_history = chat_history[-20:]
    session['chat_history'] = chat_history
    session.modified = True

    # –®–∞–≥ 1: –∫–æ—Ä–æ—Ç–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–æ–∂–∏–¥–∞–µ–º —Å–ª–æ–≤–æ "–î–∏–µ—Ç–∞" –∏–ª–∏ "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏" –µ—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç)
    messages_for_api = [{"role": "system", "content": SYSTEM_PROMPT}] + chat_history

    try:
        classification_resp = client.chat.completions.create(
            model=MODEL_NAME,
            messages=messages_for_api,
            temperature=CLASSIFICATION_TEMPERATURE,
            max_tokens=CLASSIFICATION_MAX_TOKENS
        )
        classifier_text = (classification_resp.choices[0].message.content or "").strip()
        logger.debug("Classifier response: %r", classifier_text)
    except Exception as e:
        logger.exception("OpenAI classification call failed")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."}), 500

    # --- –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –º–∞—Ä–∫–µ—Ä "–î–∏–µ—Ç–∞" ---
    if classifier_text == "–î–∏–µ—Ç–∞":
        user_id = session.get('user_id')
        if not user_id:
            return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–Ω–µ—Ç user_id –≤ —Å–µ—Å—Å–∏–∏)."}), 200

        if Diet is None or User is None:
            logger.error("Diet/User model not available - check imports")
            return jsonify({"reply": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –º–æ–¥–µ–ª—å Diet/User –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."}), 500

        try:
            user = User.query.get(user_id)
        except Exception:
            user = None
            logger.exception("DB error when fetching user")

        if not user:
            return jsonify({"reply": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."}), 200

        user_name = getattr(user, "name", None) or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        try:
            current_diet = Diet.query.filter_by(user_id=user_id).order_by(Diet.date.desc()).first()
        except Exception:
            current_diet = None
            logger.exception("DB error when fetching diet")

        if not current_diet:
            return jsonify({"reply": f"{user_name}, —è –Ω–µ –Ω–∞—à—ë–ª –≤–∞—à—É —Ç–µ–∫—É—â—É—é –¥–∏–µ—Ç—É –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∏–µ—Ç—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ."}), 200

        diet_summary = _format_diet_summary(current_diet)
        diet_system = (
            f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Kilogr.app. –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏: {user_name}. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –¥–∏–µ—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –¥–∏–µ—Ç—ã –Ω–∏–∂–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–û—Ç–≤–µ—á–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω–æ: –¥–∞–≤–∞–π 1‚Äì2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–º–µ–Ω—ã, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤ –∏ –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω—ã—Ö –ö–ë–ñ–£, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        )
        diet_user_prompt = (
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n"
            f"–¢–µ–∫—É—â–∞—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –¥–∏–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {getattr(current_diet, 'date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}):\n\n"
            f"{diet_summary}\n\n"
            f"---\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: \"{user_message}\"\n\n"
            "–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã/–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å–µ –±–ª—é–¥–∞ (—É–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞–º–º—ã –∏ –ø—Ä–∏–±–ª. –ö–ë–ñ–£, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ). "
            "–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏, –∏ –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ê—Å–∫–∞—Ä, ...\")."
        )

        messages_for_diet_api = [
            {"role": "system", "content": diet_system},
            {"role": "user", "content": diet_user_prompt}
        ]

        diet_reply = _call_openai(messages_for_diet_api, temperature=DIET_TEMPERATURE, max_tokens=DIET_MAX_TOKENS)
        if diet_reply is None:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."}), 500

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∞—Ä–∫–µ—Ä –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
        chat_history.append({"role": "assistant", "content": diet_reply})
        session['chat_history'] = chat_history
        session.modified = True

        return jsonify({"reply": diet_reply}), 200

    # --- –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –º–∞—Ä–∫–µ—Ä "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏" ---
    if classifier_text == "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏":
        user_id = session.get('user_id')
        if not user_id:
            return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–Ω–µ—Ç user_id –≤ —Å–µ—Å—Å–∏–∏)."}), 200

        if BodyAnalysis is None or User is None:
            logger.error("BodyAnalysis/User model not available - check imports")
            return jsonify({"reply": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –º–æ–¥–µ–ª—å BodyAnalysis/User –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."}), 500

        try:
            user = User.query.get(user_id)
        except Exception:
            user = None
            logger.exception("DB error when fetching user")

        if not user:
            return jsonify({"reply": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."}), 200

        user_name = getattr(user, "name", None) or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        try:
            current_ba = BodyAnalysis.query.filter_by(user_id=user_id).order_by(BodyAnalysis.timestamp.desc()).first()
        except Exception:
            current_ba = None
            logger.exception("DB error when fetching body analysis")

        if not current_ba:
            return jsonify({"reply": f"{user_name}, —É –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞."}), 200

        body_summary = _format_body_summary(current_ba)
        body_system = (
            f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–ª–∞ Kilogr.app. –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏: {user_name}. –†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π –æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å–º–∞–π–ª–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π. –ù–µ –∑–¥–∞—Ä–æ–≤–∞–π—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–µ –∑–¥–∞—Ä–æ–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º. –ü—ã—Ç–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ –¥–µ–ª—É –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã –∏ –≤—ã–¥—É–º–∞–Ω–Ω–æ–π –∏–Ω—Ñ—ã. –õ—É—á—à–µ –æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞—Ç—å —Ç–∞–∫—Ç–∏—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ç–µ–ª–∞, —É–∫–∞–∑–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ/—Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞, –¥–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ø–∏—Ç–∞–Ω–∏–µ/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–ø–æ–≤–µ–¥–µ–Ω–∏–µ) –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏. –ò –≥–æ–≤–æ—Ä–∏ –æ —Ç–æ–º —á—Ç–æ Kilogr.app –ø–æ–º–æ–∂–µ—Ç –µ–º—É –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ü–µ–ª–µ–π. "
        )
        body_user_prompt = (
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–µ–ª–∞ (–≤–∫–ª—é—á–∞—è –ø–æ—è—Å–Ω–µ–Ω–∏—è):\n\n"
            f"{body_summary}\n\n"
            f"---\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: \"{user_message}\"\n\n"
            "–î–∞–π –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, —É–∫–∞–∂–∏ 2‚Äì3 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏. "
            "–í –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ê—Å–∫–∞—Ä, ...\")."
        )

        messages_for_body_api = [
            {"role": "system", "content": body_system},
            {"role": "user", "content": body_user_prompt}
        ]

        body_reply = _call_openai(messages_for_body_api, temperature=BODY_TEMPERATURE, max_tokens=BODY_MAX_TOKENS)
        if body_reply is None:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º."}), 500

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        chat_history.append({"role": "assistant", "content": body_reply})
        session['chat_history'] = chat_history
        session.modified = True

        return jsonify({"reply": body_reply}), 200

    # --- –ò–Ω–∞—á–µ: –æ–±—ã—á–Ω—ã–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ---
    try:
        completion = client.chat.completions.create(
            model=MODEL_NAME,
            messages=messages_for_api,
            temperature=DEFAULT_TEMPERATURE,
            max_tokens=DEFAULT_MAX_TOKENS
        )
        bot_response = (completion.choices[0].message.content or "").strip()
        chat_history.append({"role": "assistant", "content": bot_response})
        session['chat_history'] = chat_history
        session.modified = True
        return jsonify({"reply": bot_response}), 200
    except Exception as e:
        logger.exception("OpenAI general error")
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500


@assistant_bp.route('/assistant/history', methods=['GET'])
def get_history():
    chat_history = session.get('chat_history', [])
    return jsonify({"history": chat_history}), 200


@assistant_bp.route('/assistant/clear', methods=['POST'])
def clear_history():
    session.pop('chat_history', None)
    session.modified = True
    return jsonify({"status": "ok"}), 200
