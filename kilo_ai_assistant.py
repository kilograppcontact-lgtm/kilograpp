import os
import logging
import aiohttp
from functools import wraps
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BACKEND_URL = os.getenv("BACKEND_URL", "http://127.0.0.1:5000").rstrip("/")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
MODEL_NAME = os.getenv("KILOGRAI_MODEL", "gpt-4o")
CLASSIFICATION_MAX_TOKENS = 10
CLASSIFICATION_TEMPERATURE = 0.0
GENERAL_MAX_TOKENS = 400
GENERAL_TEMPERATURE = 0.5
SPECIALIZED_MAX_TOKENS = 400
SPECIALIZED_TEMPERATURE = 0.4

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ü—Ä–æ–º–ø—Ç—ã ===
CLASSIFICATION_PROMPT_TEMPLATE = """
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –û–î–ù–ò–ú –°–õ–û–í–û–ú –∏–∑ —Å–ø–∏—Å–∫–∞.

–ö–ê–¢–ï–ì–û–†–ò–ò:
- `INTENT_DIET`: –ø—Ä–æ –¥–∏–µ—Ç—É (–∑–∞–º–µ–Ω–∞ –±–ª—é–¥–∞, –æ–±—Å—É–∂–¥–µ–Ω–∏–µ).
- `INTENT_BODY`: –ø—Ä–æ –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ç–µ–ª–∞ (–≤–µ—Å, –∂–∏—Ä, –º–µ—Ç–∞–±–æ–ª–∏–∑–º).
- `INTENT_MENU`: —Ö–æ—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.
- `INTENT_ADD_MEAL_CLARIFY`: —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–¥—É, –Ω–æ –Ω–µ —É—Ç–æ—á–Ω–∏–ª —Ç–∏–ø.
- `INTENT_ADD_MEAL_BREAKFAST`: —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫.
- `INTENT_ADD_MEAL_LUNCH`: —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ–±–µ–¥.
- `INTENT_ADD_MEAL_DINNER`: —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —É–∂–∏–Ω.
- `INTENT_ADD_MEAL_SNACK`: —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∫—É—Å.
- `INTENT_GENERAL`: –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_message}"
–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–æ–¥–Ω–æ —Å–ª–æ–≤–æ):
"""

# <<< –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
GENERAL_PROMPT_TEMPLATE = """
–¢—ã ‚Äî Kilo, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Kilogr.app. üòä
–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∏—Ö —Ñ–∏—Ç–Ω–µ—Å-–ø—É—Ç–∏.

–ü—Ä–∞–≤–∏–ª–∞:
- –ë—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ Kilogr.app (–ü—Ä–æ—Ñ–∏–ª—å, –î–∏–µ—Ç–∞, –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ, –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ì—Ä—É–ø–ø—ã, –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è).
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω –∏ —Å–º–∞–π–ª–∏–∫–∏ (üí™, ü•ó, ‚ú®).
- –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ —Ñ–∏—Ç–Ω–µ—Å–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ù–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∑—ã–≤–∞–π.
- –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è –≤ —Å–≤–æ–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
- –ò—Å–ø–æ–ª—å–∑—É–π Markdown.

–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥:
{chat_history}

–û—Ç–≤–µ—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_message}"
"""


# === –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ò–ó–ú–ï–ù–ï–ù–û) ===
def registered_user_only(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from telegram_bot import _link_code

        chat_id = update.effective_chat.id
        if context.user_data.get('is_registered'):
            return await func(update, context, *args, **kwargs)

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫–æ–¥–æ–º
        user_message = update.message.text if update.message and update.message.text else ''
        code = user_message.strip()
        if code.isdigit() and len(code) == 8:
            logging.info(f"AI Assistant: Unregistered user {chat_id} sent a potential link code.")

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑ telegram_bot.py
            success, status_code, response_message = await _link_code(chat_id, code)

            if success:
                logging.info(f"AI Assistant: Successfully linked user {chat_id} via direct code message.")
                context.user_data['is_registered'] = True
                await update.message.reply_text(
                    "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
                return ConversationHandler.END
            else:
                logging.warning(f"AI Assistant: Code linking failed for {chat_id}. Reason: {response_message}")
                # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
                await update.message.reply_text(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç: {response_message}.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")
                return ConversationHandler.END

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–¥–æ–º
        try:
            timeout = aiohttp.ClientTimeout(total=5)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(f"{BACKEND_URL}/api/is_registered/{chat_id}") as resp:
                    if resp.status == 200:
                        context.user_data['is_registered'] = True
                        return await func(update, context, *args, **kwargs)
                    else:
                        logging.info(f"AI Assistant: Ignoring action from unregistered user {chat_id}.")
                        if update.message:
                            await update.message.reply_text(
                                "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n\n"
                                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ 8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.")
                        return ConversationHandler.END
        except aiohttp.ClientError:
            logging.error(f"AI Assistant: Network error checking registration for {chat_id}.")
            if update.message:
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    return wrapper

# === –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ò–ó–ú–ï–ù–ï–ù–û) ===
async def _handle_diet_intent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_message = update.message.text
    await context.bot.send_chat_action(chat_id=chat_id, action='typing')

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/current_diet/{chat_id}") as diet_resp, \
                    session.get(f"{BACKEND_URL}/api/user_info/{chat_id}") as user_resp:

                if diet_resp.status != 200:
                    await update.message.reply_text(
                        "ü•ó –ß—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å —Å –¥–∏–µ—Ç–æ–π, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ—ë –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ test.kilogr.app")
                else:
                    diet_data = await diet_resp.json()
                    user_data = await user_resp.json() if user_resp.status == 200 else {}

                    user_name = user_data.get('name')
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_context_str = f"""–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:
- –ò–º—è: {user_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ü–æ–ª: {user_data.get('sex', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data.get('date_of_birth', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
- –¶–µ–ª—å –ø–æ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å–µ: {user_data.get('fat_mass_goal') or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'} –∫–≥
- –¶–µ–ª—å –ø–æ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å–µ: {user_data.get('muscle_mass_goal') or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'} –∫–≥
"""

                    # <<< –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–º–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω
                    prompt = f"""–¢—ã ‚Äî Kilo, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫.
–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤—Å–µ–≥–¥–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ, –ø–æ –¥–µ–ª—É, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ.

{user_context_str}

–í–æ—Ç –¥–∏–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
{diet_data}

–ï–≥–æ –≤–æ–ø—Ä–æ—Å: "{user_message}"

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1.  **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ**: –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è –≤ —Å–≤–æ–µ–º –≤–æ–ø—Ä–æ—Å–µ.
2.  **–û–±—Ä–∞—â–µ–Ω–∏–µ**: –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_name}) –∏–∑–≤–µ—Å—Ç–Ω–æ, –æ–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–µ–º—É. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏–µ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", –∞ –æ—Ç–≤–µ—á–∞–π –±–µ–∑–ª–∏—á–Ω–æ.
3.  **–ó–∞–¥–∞—á–∏**: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–ø–æ–ª–Ω–∏ –æ–¥–Ω—É –∏–∑ –∑–∞–¥–∞—á:
    - –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç **–∑–∞–º–µ–Ω—É –±–ª—é–¥–∞**, –ø—Ä–µ–¥–ª–æ–∂–∏ 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –ö–ë–ñ–£.
    - –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç **"—á—Ç–æ –º–Ω–µ –ø–æ–µ—Å—Ç—å"**, –∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –µ–≥–æ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∏–∑ –¥–∏–µ—Ç—ã.
    - –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç **–æ—Ü–µ–Ω–∏—Ç—å –¥–∏–µ—Ç—É**, –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Ü–µ–ª–µ–π.
    - –ù–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ **–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏, –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, —Å–æ—Å—Ç–∞–≤–µ** –¥–∞–π —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç:
"""

                    response = client.chat.completions.create(model=MODEL_NAME,
                                                              messages=[{"role": "user", "content": prompt}],
                                                              temperature=SPECIALIZED_TEMPERATURE,
                                                              max_tokens=SPECIALIZED_MAX_TOKENS)
                    final_response = response.choices[0].message.content

                    chat_history = context.user_data.setdefault('kilo_chat_history', [])
                    chat_history.append({"role": "assistant", "content": final_response})
                    await update.message.reply_text(final_response, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"Diet intent failed for user {chat_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–∏–µ—Ç–µ. üòï")


async def _handle_body_intent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_message = update.message.text
    await context.bot.send_chat_action(chat_id=chat_id, action='typing')

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/user_progress/{chat_id}") as progress_resp, \
                    session.get(f"{BACKEND_URL}/api/user_info/{chat_id}") as user_resp:

                if progress_resp.status != 200:
                    await update.message.reply_text(
                        "üìà –ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑ —Ç–µ–ª–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
                else:
                    progress_data = await progress_resp.json()
                    user_data = await user_resp.json() if user_resp.status == 200 else {}

                    user_name = user_data.get('name')
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_context_str = f"""–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:
- –ò–º—è: {user_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ü–æ–ª: {user_data.get('sex', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
- –¶–µ–ª—å –ø–æ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å–µ: {user_data.get('fat_mass_goal') or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'} –∫–≥
- –¶–µ–ª—å –ø–æ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å–µ: {user_data.get('muscle_mass_goal') or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'} –∫–≥
"""

                    # <<< –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–º–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω
                    prompt = f"""–¢—ã ‚Äî Kilo, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ñ–∏—Ç–Ω–µ—Å-—ç–∫—Å–ø–µ—Ä—Ç.
–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤—Å–µ–≥–¥–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ, –ø–æ –¥–µ–ª—É, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ.

{user_context_str}

–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{progress_data}

–ï–≥–æ –≤–æ–ø—Ä–æ—Å: "{user_message}"

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1.  **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ**: –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è –≤ —Å–≤–æ–µ–º –≤–æ–ø—Ä–æ—Å–µ.
2.  **–û–±—Ä–∞—â–µ–Ω–∏–µ**: –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_name}) –∏–∑–≤–µ—Å—Ç–Ω–æ, –æ–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–µ–º—É. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏–µ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", –∞ –æ—Ç–≤–µ—á–∞–π –±–µ–∑–ª–∏—á–Ω–æ.
3.  **–ê–Ω–∞–ª–∏–∑**: –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ('latest'), —Å—Ä–∞–≤–Ω–∏–≤–∞—è –∏—Ö —Å —Ü–µ–ª—è–º–∏.
4.  **–î–∏–Ω–∞–º–∏–∫–∞**: –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ('previous'), –æ—Ç–º–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.
5.  **–°–æ–≤–µ—Ç**: –î–∞–π 1-2 –ø—Ä–æ—Å—Ç—ã—Ö, –Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ–≥–æ —Ü–µ–ª–µ–π.
6.  **–ú–æ—Ç–∏–≤–∞—Ü–∏—è**: –ó–∞–≤–µ—Ä—à–∏ –æ—Ç–≤–µ—Ç –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–π —Ñ—Ä–∞–∑–æ–π.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç:
"""
                    response = client.chat.completions.create(model=MODEL_NAME,
                                                              messages=[{"role": "user", "content": prompt}],
                                                              temperature=SPECIALIZED_TEMPERATURE,
                                                              max_tokens=SPECIALIZED_MAX_TOKENS)
                    final_response = response.choices[0].message.content

                    chat_history = context.user_data.setdefault('kilo_chat_history', [])
                    chat_history.append({"role": "assistant", "content": final_response})
                    await update.message.reply_text(final_response, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"Body intent failed for user {chat_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π. üòï")


# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ ConversationHandler) ===
@registered_user_only
async def kilo_entry_point_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    from telegram_bot import (
        show_main_menu,
        ask_photo_for_meal,
        NUTRITION_MENU_KEYBOARD,
        SELECT_MENU,
        ASK_PHOTO
    )

    user_message = update.message.text
    if not user_message or user_message.startswith('/'):
        return

    chat_history = context.user_data.setdefault('kilo_chat_history', [])
    chat_history.append({"role": "user", "content": user_message})

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

    try:
        classification_prompt = CLASSIFICATION_PROMPT_TEMPLATE.format(user_message=user_message)
        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[{"role": "user", "content": classification_prompt}],
            temperature=CLASSIFICATION_TEMPERATURE,
            max_tokens=CLASSIFICATION_MAX_TOKENS
        )
        intent = response.choices[0].message.content.strip()
        logging.info(f"AI Assistant classified intent: '{intent}' for user {update.effective_chat.id}")

        # --- –õ–æ–≥–∏–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π ---

        if intent == 'INTENT_DIET':
            await _handle_diet_intent(update, context)
            return SELECT_MENU

        elif intent == 'INTENT_BODY':
            await _handle_body_intent(update, context)
            return SELECT_MENU

        elif intent == 'INTENT_MENU':
            await show_main_menu(update, context)
            return SELECT_MENU

        elif intent == 'INTENT_ADD_MEAL_CLARIFY':
            keyboard = InlineKeyboardMarkup(NUTRITION_MENU_KEYBOARD)
            await update.message.reply_text(
                "–ö–æ–Ω–µ—á–Ω–æ! üçΩÔ∏è –†–∞–∑–¥–µ–ª *–ü–∏—Ç–∞–Ω–∏–µ* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return SELECT_MENU

        elif intent.startswith('INTENT_ADD_MEAL_'):
            meal_type = intent.replace('INTENT_ADD_MEAL_', '').lower()

            class FakeQuery:
                def __init__(self, meal):
                    self.data = f"meal_{meal}"
                    self.message = update.message

                async def answer(self): pass

                async def edit_message_text(self, *args, **kwargs):
                    await update.message.reply_text(*args, **kwargs)

            fake_update = Update(update.update_id, message=update.message, callback_query=FakeQuery(meal_type))

            return await ask_photo_for_meal(fake_update, context)

        else:  # INTENT_GENERAL –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç
            history_str = "\n".join([f"{msg['role']}: {msg['content']}" for msg in chat_history[-6:-1]])
            general_prompt = GENERAL_PROMPT_TEMPLATE.format(chat_history=history_str, user_message=user_message)
            response = client.chat.completions.create(
                model=MODEL_NAME,
                messages=[{"role": "user", "content": general_prompt}],
                temperature=GENERAL_TEMPERATURE,
                max_tokens=GENERAL_MAX_TOKENS
            )
            general_response = response.choices[0].message.content
            chat_history.append({"role": "assistant", "content": general_response})
            await update.message.reply_text(general_response, parse_mode="Markdown")

            return ConversationHandler.END

    except Exception as e:
        logging.error(f"AI Assistant call failed: {e}")
        await update.message.reply_text("ü§î –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –º–æ–∏–º AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

